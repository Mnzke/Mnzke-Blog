<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>鸿蒙开发   1.2  组件布局和事件</title>
    <url>/2021/12/01/HarmonyOS1-2/</url>
    <content><![CDATA[<h1 id="组件布局和事件"><a href="#组件布局和事件" class="headerlink" title="组件布局和事件"></a>组件布局和事件</h1><h2 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h2><p>在那个界面搭建组件就在那个界面的XML文件中去写组件</p>
<p>button组件</p>
<p>在XML中配置button,注意XML文件的注释不能写在标记里</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--ability_main.XML --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ohos:id</span>=<span class="string">&quot;$+id:but1&quot;</span>           </span></span><br><span class="line"><span class="tag">        <span class="attr">ohos:height</span>=<span class="string">&quot;match_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ohos:width</span>=<span class="string">&quot;match_content&quot;</span>    </span></span><br><span class="line"><span class="tag">        <span class="attr">ohos:text</span>=<span class="string">&quot;点我&quot;</span>               </span></span><br><span class="line"><span class="tag">        <span class="attr">ohos:text_size</span>=<span class="string">&quot;200&quot;</span>          </span></span><br><span class="line"><span class="tag">        <span class="attr">ohos:background_element</span>=<span class="string">&quot;red&quot;</span> </span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- match_parent表示让当前控件的大小和父布局的大小一样，也就是由父布局来决定当前控件的大小									</span></span><br><span class="line"><span class="comment">     wrap_content表示让当前的控件大小能够刚好包含里面的内容，也就是由控件内容决定当前控件的大小 --&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在MainAbilitySlice.java的class MainAbilitySlice下的onStart方法中写，以调用XML文件中的配置</span></span><br><span class="line">	<span class="keyword">super</span>.setUIContent(ResourceTable.Layout_ability_main);</span><br></pre></td></tr></table></figure>
<p>同样一下操作我们需要在在<em>MainAbilitySlice.java</em>的<em>class  MainAbilitySlice</em>下的<em>onStart</em>方法中写，给按钮创建事件。</p>
<ol>
<li>通过id找到组件</li>
<li>给按钮组件设置单击事件</li>
<li>写一个类实现<em>ClickedListener</em>接口并重写<em>onClick</em>方法</li>
<li>编写onClick方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//onStart方法中写</span></span><br><span class="line">	<span class="comment">//1.找到按钮</span></span><br><span class="line">        Button btn =(Button)findComponentById(ResourceTable.Id_but1);</span><br><span class="line"> 	<span class="comment">//2.给按钮绑定事件</span></span><br><span class="line">        btn.setClickedListener(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="comment">//函数参数是一个Component类下的内部接口ClickedListener的实现类，所以需要我们自己创建一个该接口的实现类，如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//class MainAbilitySlice中创建ClickedListener接口的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">Component</span>.<span class="title">ClickedListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        Button btn = (Button)component;<span class="comment">//component是所有组件的父类，及点谁component就是谁的对象</span></span><br><span class="line">        btn.setText(<span class="string">&quot;被点了&quot;</span>);</span><br><span class="line">        <span class="comment">//如果要用component调用子类方法需要强转,下转型对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>ResourceTable</em>是鸿蒙提供的一个资源类，里面有所有资源变量，是static类型所以直接用类名调用</p>
<p>单击事件的四种写法：</p>
<ol>
<li>定义实现类</li>
<li>当前类作为实现类</li>
<li>匿名内部类 </li>
<li>方法引用</li>
</ol>
]]></content>
      <categories>
        <category>HarmongOS</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 1034.边界着色</title>
    <url>/2021/12/07/LeetCode12-7/</url>
    <content><![CDATA[<h1 id="LeetCode-1034"><a href="#LeetCode-1034" class="headerlink" title="LeetCode 1034"></a>LeetCode 1034</h1><p>题目传送<a href="https://leetcode-cn.com/problems/coloring-a-border/">戳这里</a></p>
<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给你一个大小为 <em> m x n </em> 的整数矩阵 grid ，表示一个网格。另给你三个整数 row、col 和 color 。网格中的每个值表示该位置处的网格块的颜色。两个网格块属于同一 连通分量需满足下述全部条件：</p>
<ul>
<li>两个网格块颜色相同</li>
<li>在上、下、左、右任意一个方向上相邻</li>
</ul>
<p>连通分量的边界是指连通分量中满足下述条件之一的所有网格块：</p>
<ul>
<li>在上、下、左、右四个方向上与不属于同一连通分量的网格块相邻</li>
<li>在网格的边界上（第一行/列或最后一行/列）</li>
</ul>
<p>请你使用指定颜色 <em>color</em>  为所有包含网格块  <em>grid[row][col]</em>  的 <strong>连通分量的边界</strong> 进行着色，并返回最终的网格 grid 。</p>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：grid = [[1,1],[1,2]],  row = 0,  col = 0,  color = 3</p>
<p>输出：[[3,3],[3,2]]</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：grid = [[1,2,2],[2,3,2]],  row = 0,  col = 1,  color = 3<br>输出：[[1,3,3],[2,3,3]]</p>
</blockquote>
<p><strong>示例 3：</strong></p>
<blockquote>
<p>输入：grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2<br>输出：[[2,2,2],[2,1,2],[2,2,2]]</p>
</blockquote>
<p><strong>提示：</strong></p>
<blockquote>
<p>m == grid.length<br>n == grid[i].length<br>1 &lt;= m, n &lt;= 50<br>1 &lt;= grid[i][j], color &lt;= 1000<br>0 &lt;= row &lt; m<br>0 &lt;= col &lt; n</p>
</blockquote>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题意就是说给你一个  <em> m </em> x <em> n </em> 的网格矩阵，每个网格都有一种颜色，用不同数字表示不同颜色，若一个网格的上下左右某个或多个方块中颜色相同（数字相同），则称他们同属于一个连通分量。</p>
<p>而连通分量的边界则指在一个连通分量中的某个方块的上下左右不全是相同颜色的方块，所有这些方块连起来构成连通分量的边界，也可以理解成一片颜色的边缘方块。如图</p>
<p><img src="/2021/12/07/LeetCode12-7/2.png" alt="图1"></p>
<p>可以看出图片中红色区域中的红线则表示边界，而边界所触及的方块也就叫做连通分量的边界。所以我们现在是要对给定的包含  <em>grid[row][col]</em> 这个方块的连通分量的边界染色成 <em>color</em> ，请着重注意理解连通分量的边界这一概念。</p>
<p>下面如图给出样例的模拟：</p>
<p><img src="/2021/12/07/LeetCode12-7/1.png" alt="图2"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路就是我们以 <em>grid[row][col]</em>为起点BFS   <em>grid[row][col]</em> 所属的联通分量，然后去寻找边，找到边就加到border数组中，最后将border数组中对应的点遍历染色。</p>
<p>然后分析我们需要一个BFS中经典queue，需要pair\<int>\<int>去储存点,还需要一个judge数组判断该点是否已经遍历过。</int></int></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>Leetcode提交代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;<span class="comment">//用pair储存点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">colorBorder</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> color) &#123;</span><br><span class="line">        <span class="keyword">int</span> n=grid.<span class="built_in">size</span>(),m=grid[<span class="number">0</span>].<span class="built_in">size</span>();<span class="comment">//grid的长和宽；n对应x，m对应y</span></span><br><span class="line">        <span class="keyword">bool</span> judge[n][m];<span class="comment">//相当于visited数组</span></span><br><span class="line">        <span class="built_in">memset</span>(judge,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(judge));</span><br><span class="line">        vector&lt;pii&gt; boder;<span class="comment">//用来储存边界</span></span><br><span class="line">        <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;<span class="comment">//方向数组</span></span><br><span class="line">        <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        queue&lt;pii&gt; que;<span class="comment">//BFS</span></span><br><span class="line">        que.<span class="built_in">push</span>(<span class="built_in">pii</span>(row,col));</span><br><span class="line">        judge[row][col]=<span class="literal">true</span>;<span class="comment">//起点已经遍历过</span></span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            pii node =que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">int</span> x=node.first,y=node.second;</span><br><span class="line">            <span class="keyword">bool</span> isborder=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> nx=x+dx[i];</span><br><span class="line">                <span class="keyword">int</span> ny=y+dy[i];</span><br><span class="line">                <span class="keyword">if</span>(!(<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;n &amp;&amp; <span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;m &amp;&amp; grid[nx][ny]==grid[row][col]))&#123;<span class="comment">//边界的判断条件</span></span><br><span class="line">                    isborder=<span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!judge[nx][ny])&#123;<span class="comment">//如果是边界就没必要继续放在queue中去BFS，所以加入不是边界的点继续去找边界</span></span><br><span class="line">                    judge[nx][ny]=<span class="literal">true</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(<span class="built_in">pii</span>(nx,ny));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isborder)&#123;<span class="comment">//将边界加入boder</span></span><br><span class="line">                boder.<span class="built_in">push_back</span>(<span class="built_in">pii</span>(x,y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[x,y]:boder) &#123;</span><br><span class="line">            grid[x][y]=color;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>完结撒花，后面更新DFS版本；</p>
]]></content>
      <categories>
        <category>ACM 题集</category>
        <category>Algorithm</category>
        <category>BFS</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>TreeArray</title>
    <url>/2021/12/09/TreeArray/</url>
    <content><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="树状数组能解决的问题："><a href="#树状数组能解决的问题：" class="headerlink" title="树状数组能解决的问题："></a>树状数组能解决的问题：</h3><p>给定一个长度为n的数组，多次进行如下两种操作：</p>
<ol>
<li>给定一个数m，得到数组1-m的前缀和。</li>
<li>对某个指定下标的数值进行修改</li>
</ol>
<p>根据我们的一般思想，可能就是建立前缀和数组，每次去更新数的时候，再去更新一次前缀和数组，建立前缀和数组$ \Omicron(n) $而更新一次最坏也是$ \Omicron(n) $，这个时间复杂度是无法接受的，所以便出现了树状数组。</p>
<h3 id="树状数组-1"><a href="#树状数组-1" class="headerlink" title="树状数组"></a>树状数组</h3><p><img src="/2021/12/09/TreeArray/1.png" alt="tree"></p>
<p>如图，对于一个长度为n的数组，A数组存放的是数组的初始值，引入一个辅助数组C，即为树状数组；</p>
<blockquote>
<p>$C[1] = A[1]$<br>$C[2] = A[1] + A[2]$<br>$C[3] = A[3]$<br>$C[4] = A[1] + A[2] + A[3] + A[4]$<br>$C[5] = A[5]$<br>$C[6] = A[5] + A[6]$<br>$C[7] = A[7]$<br>$C[8] =  A[1] + A[2] + A[3]+ A[4] + A[5] + A[6] + A[7] + A[8]$</p>
</blockquote>
<p>我们从中可以发现这样的规律，我们称$C[i]$的值为下标为$i$的数所管辖的数的和，下标为$i$的数所管辖的元素的个数为$2^k$ 个，($k$为$i$的二进制的末尾$0$的个数）：</p>
<ul>
<li>$ i = 8 = 1000$，末尾$3$个$0$，故$k = 3$，所管辖的个数为$2^ 3 = 8$ ，$C[8]$是$8$个数的和；</li>
<li>$i = 5 = 0101$，末尾没有$0$，故$k = 0$，所管辖的个数为 $2^0 = 1$，$C[5]$是$1$个数的和；</li>
</ul>
<p><strong>而对于前m个数的和也同样可以看出规律</strong></p>
<blockquote>
<p>$C[1] = A[1]$<br>$C[2] = C[1] + A[2]$<br>$C[3] = A[3]$<br>$C[4] = C[2] + C[3] + A[4] $<br>$C[5] = A[5]$<br>$C[6] = C[5] + A[6] $<br>$C[7] = A[7]$<br>$C[8] = C[4]+ C[6] + C[7] + A[8] $</p>
</blockquote>
<p>我们可以看出 $SUM<em>i=C</em>{i1}+C_{i2}+…$,而这里m和C[i]的对应关系是这样的，对于查询的m，将它转换成二进制后，不断对末尾的1的位置进行-1的操作，直到全部为0停止，中间得到的值就是c[i]，例如：</p>
<p>$m = 7$，$ sum_7 = C_7 + C_6 + C_4$，$7$的二进制为( $C_7$ 得到)，对$0111$的末尾1的位置-1，得到0110 = 6（$C_6$得到），再对$0110$末尾$1$位置-1，得到$0100 = 4$（$ C_4$ 得到），最后对$0100$末尾$1$位置$-1$后得到$0000$（结束），计算停止，至此$ C_7，C_6，C_4$全部得到，求和后就是m = 7时它的前缀和；</p>
<p><strong>那么现在我们进行更新的操作</strong></p>
<p>假设更新$A[2] = 5$，通过观察我们得知，如果修改了$A[2]$的值，那么管辖$A[2]$的$C[2]，C[4]，C[8]$的前缀和都要加上5（所有的祖先节点），那么和查询类似，我们如何得到$C2$的所有祖先节点呢，依旧是上述的巧妙的方法，但是我们把它倒过来用，对于要更新i位置的值，我们把$i$转换成二进制，不断对二进制最后一个1的位置+1，直到达到数组下标的最大值n结束，对于给出的例子i = 2，假设数组下标上限$n = 8$，$i$转换成二进制后等于0010（$ C_2$），对末尾1的位置进行+1，得到0100（$ C_4$ ），对末尾的1的位置进行+1，得到1000（$ C_8$ ），循环结束，对$ C_2，C_4，C_8$的前缀和都要+5，当然不能忘记对$A[2]$的值+5，单点更新值过程结束。</p>
<p>所以我们在建树的时候就可以理解成对一个全是0的数据不断进行更新操作。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>], c[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//得到n二进制到最高位连续0的个数，其实就是简单的保留了n的最后一个1，其余都变0</span></span><br><span class="line">	<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ans += c[x];</span><br><span class="line">		x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">//更新第i个元素的值并更新树状数组</span></span><br><span class="line">	a[i] = v;<span class="comment">//改变a[i]的值，若是给a[i]增加v，就a[i]+=v</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt;= n)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i] += v;</span><br><span class="line">		i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)<span class="comment">//简单的建树</span></span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		<span class="built_in">update</span>(i, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ACM 知识点</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
</search>
